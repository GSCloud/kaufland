<!-- top navigation -->
<nav id="top_nav" class="top hidden">
  <a class="nav_app">
    <span class="badge circle left red bold white-text hidden">‚ùï</span>
    <span id="user_role" class="badge bottom small transparent white-text hidden"></span>
    <img id="logo" class="square large"
      src="{{ cdn }}/img/k-app-logo.png"/>
  </a>
  <a class="nav_config">
    <i tabindex="-1" class="large" data-color="blue-text">build</i>
  </a>
  <a class="nav_user">
    <i tabindex="-1" class="large" data-color="lime-text">face</i>
    <img id="avatar" class="small circle no-margin hidden"
      src=""
      onerror="javascript:if($(this).attr('src')){$(this).addClass('hidden');$('.nav_user').append('<i tabindex=-1 class=\'large lime-text\'>face</i>');}"
    >
  </a>
</nav>
<!-- bottom navigation | medium large -->
<nav class="bottom m l hidden">
  <a class="nav_info">
    <i tabindex="-1" class="large" data-color="blue-text">info</i>
    <div>
      <span tabindex="-1">{{ l.nav_info }}</span>
    </div>
  </a>
  <a class="nav_game">
    <i tabindex="-1" class="large" data-color="teal-text">sports_esports</i>
    <div>
      <span tabindex="-1">{{ l.nav_game }}</span>
    </div>
  </a>
  <a class="nav_message">
    <i tabindex="-1" class="large" data-color="green-text">message</i>
    <div>
      <span tabindex="-1">{{ l.nav_message }}</span>
    </div>
  </a>
  <a class="nav_price">
    <i tabindex="-1" class="large" data-color="pink-text">paid</i>
    <div>
      <span tabindex="-1">{{ l.nav_price }}</span>
    </div>
  </a>
  <a class="nav_warehouse">
    <i tabindex="-1" class="large" data-color="orange-text">warehouse</i>
    <div>
      <span tabindex="-1">{{ l.nav_warehouse }}</span>
    </div>
  </a>
</nav>
<!-- bottom navigation | small -->
<nav class="bottom s hidden">
  <a class="nav_info">
    <i tabindex="-1" class="large" data-color="blue-text">info</i>
  </a>
  <a class="nav_game">
    <i tabindex="-1" class="large" data-color="teal-text">sports_esports</i>
  </a>
  <a class="nav_message">
    <i tabindex="-1" class="large" data-color="green-text">message</i>
  </a>
  <a class="nav_price">
    <i tabindex="-1" class="large" data-color="pink-text">paid</i>
  </a>
  <a class="nav_warehouse">
    <i tabindex="-1" class="large" data-color="orange-text">warehouse</i>
  </a>
</nav>

<script>
  (function (w, $, undefined) {
    "use strict";

    // scroll handler
    w.onscroll = onscroll;
    function onscroll() {

      // store user activity
      GSC.lastclick = +new Date();
      $('.toast').removeClass('active');

      // green bar
      var scroll = document.body.scrollTop || document.documentElement.scrollTop;
      var height = document.documentElement.scrollHeight - document.documentElement.clientHeight;
      var scrolled = (scroll / height) * 100;
      if (document.getElementById("progressbar")) document.getElementById("progressbar").style.width = scrolled + "%";
      if (localStorage && localStorage['navigation'] && (localStorage['scroll_' + localStorage['navigation']])) {
        localStorage['scroll_' + localStorage['navigation']] = parseInt(scroll);
      }

      // fix top navigation and comm icon on touch enabled devices
      if (GSC.touch) {
        if (scroll > 100) {
          $("#top_nav").hide(250);
          $("#comm").css('top', 0);
        } else {
          $("#top_nav").show(100);
          $("#comm").css('top', '85px');
        }
      }
    };



    // *** DELAYED FUNCTIONS ***
    GSC._fn.push(function UI() {

      // set UI mode
      function setUImode() {
        if (parseBool(localStorage["ui"])) {
          GSC.ui = 'light';
          ui('mode', 'light');
          $('.white-text').removeClass('white-text').addClass('black-text');
          $('#debuglist').addClass('white-text');
          $('.yellow-text').removeClass('yellow-text').addClass('red-text');
        } else {
          GSC.ui = 'dark';
          ui('mode', 'dark');
          $('.black-text').removeClass('black-text').addClass('white-text');
          $('#debuglist').addClass('white-text');
          $('.red-text').removeClass('red-text').addClass('yellow-text');
        }
      }

      // set active navigation by element
      function setNavigation(el) {
        if (!el) return;
        if (!$('.' + el)) return;
        localStorage['navigation'] = el;
        $('#avatar').removeClass('large');

        // remove modals
        if (GSC.modals.length) {
          GSC.modals.forEach(el => {
            $('#' + el).removeClass('active');
          });
        }

        // compute scroll offset
        var offset = localStorage['scroll_' + el];
        var lastoffset = localStorage['scroll_last_' + el];
        if (isNaN(offset)) offset = 0;
        if (isNaN(lastoffset)) lastoffset = 0;
        if (localStorage['navigation_last'] == localStorage['navigation']) {
          if (offset == lastoffset) offset = 0;
        }
        localStorage['scroll_last_' + el] = offset;
        localStorage['navigation_last'] = el;

        // delayed scroll & fix progress bar
        setTimeout(function() {
          window.scrollTo({
            top: offset,
            left: 0,
            behavior: 'smooth'
          });
          document.getElementById("progressbar").style.width = 0;
        }, 10);

        // set UI
        $('nav i, nav div').removeClass();
        $('.section').addClass('hidden');
        $('.' + el + '>i').addClass($('.' + el + '>i').data('color')).addClass('large');
        $('.' + el + '>div').addClass($('.' + el + '>i').data('color')).addClass('bold');
        if (typeof GSC.DefClick == "function") GSC.DefClick();
        if (GSC.preventclick) {
          setTimeout(function() {
            GSC.preventclick = null;
          }, 100);
        }
      }

      // logo
      $('.nav_app').click(function () {
        GSC.DefClick();
        setTimeout(function() {
          $('#appinfo_modal').toggleClass('active');
          $('#changelog_modal').removeClass('active');
          GSC.modals = [];
          GSC.modals.push('appinfo_modal');
        }, 10)
      });

      // app update
      $('.nav_update').click(function () {
        if (GSC.offline) {
          GSC.DefClick();
          setTimeout(function () { // TOAST
            $('#err_connection').addClass('active');
          }, 10);
          return;
        }
        GSC.Vibrate([200]);
        $('#discount_groups').hide();
        $('nav,body').hide(250);
        setTimeout(function () {
          localStorage["discounts"] = null;
          localStorage["discountsall"] = null;
          localStorage["discountsbyname"] = null;
          localStorage["discountsallbyname"] = null;
          top.location.replace("?nonce={{ nonce }}");
        }, 250);
      });

      // save PIN / generate API key
      $('button.save_pin').click(function () {
        GSC.pin = $('#pin').val().toLowerCase().trim();
        localStorage["pin"] = GSC.pin;
        $('#pin').val(GSC.pin);
        if (!GSC.pin.length) { // no PIN - no fun
          GSC.apikey = null;
          GSC.pin = null;
        }
        GSC.DefClick();

        setTimeout(function () { // TOAST
          $('#pin_saved').addClass('active');
        }, 10);

        GSC.user_timestamp = null;
        GSC.GenerateAPIkey();
      });

      // PIN focus-in
      $('#pin').focus(function () {
        $('#pin').attr('type', 'text');
        $('.toast').removeClass('active');
      })

      // PIN focus-out
      $('#pin').focusout(function() {
        $('#pin').attr('type', 'password');
      })

      // save PIN on Enter
      $('#pin').keypress(function(e) {
        if (e.which == 13) {
          $('button.save_pin').click();
          $('#pin').blur();
          return false;
        }
      });

      // go to API page
      $('.nav_api').click(function() {
        if (GSC.offline) {
          setTimeout(function () { // TOAST
            $('#err_connection').addClass('active');
          }, 10);
          return;
        }
        top.location.href = '/api';
      });

      // changelog
      $('.nav_changelog').click(function() {
        if (GSC.offline) {
          setTimeout(function () { // TOAST
            $('#err_connection').addClass('active');
          }, 10);
          return;
        }
        GSC.PlaySound('click3');
        setTimeout(function() { // MODAL
          $('#changelog_modal').addClass('active');
          GSC.modals.push('changelog_modal');
        }, 10);

        var nonce = "?nonce=" + Math.round(Math.random() * 1000000);
        $.get('/api/v1/GetChangeLog' + nonce).done(function(data) {
          $('.quota_actual').html(data.api_usage);
          $('.quota_total').html(data.api_quota);
          if (data && data.data && data.data.changelog) {
            $('#changelog_box').html(data.data.changelog);
          }
        }).fail(function(jqXHR, status, error) {
          GSC.PlaySound('err');
          GSC.discounts_timestamp = null;
          console.log('GetUser', status, error);
        });
      });
      
      // config
      $('.nav_config').click(function() {
        setNavigation(this.className);
        $('#config').removeClass('hidden');
      });
      
      // user
      $('.nav_user').click(function() {
        setNavigation(this.className);
        $('#user').removeClass('hidden');
        $('#avatar').addClass('large');
        if (typeof GSC.GetUser == "function") GSC.GetUser();
      });

      // info
      $('.nav_info').click(function() {
        setNavigation(this.className);
        $('#info').removeClass('hidden');
      });
      
      // game
      $('.nav_game').click(function() {
        setNavigation(this.className);
        $('#game').removeClass('hidden');
      });
      
      // message
      $('.nav_message').click(function() {
        setNavigation(this.className);
        $('#message').removeClass('hidden');
      });
      
      // price
      $('.nav_price').click(function() {
        setNavigation(this.className);
        $('#price').removeClass('hidden');
        if (typeof GSC.GetDiscounts == "function") GSC.GetDiscounts();
      });
      
      // warehouse
      $('.nav_warehouse').click(function() {
        setNavigation(this.className);
        $('#warehouse').removeClass('hidden');
      });

      // settings: UI
      $('.ui').click(function() {
        localStorage["ui"] = $(this).is(":checked");
        setUImode();
        if (typeof GSC.DefClick == "function") GSC.DefClick();
      });

      // settings: VIBRATE
      $('.vibrate').click(function() {
        localStorage["vibrate"] = $(this).is(":checked");
        GSC.vibrate = parseBool(localStorage["vibrate"]);
        if (GSC.vibrate) {
          window.navigator.vibrate(100);
          playSound('click5');
        } else playSound('click3');
      });

      // settings: SFX
      $('.sfx').click(function() {
        localStorage["sfx"] = $(this).is(":checked");
        GSC.sfx = parseBool(localStorage["sfx"]);
        if (GSC.sfx) {
          playSound('click5');
        } else {
          GSC.sfx = true; // hack :)
          playSound('click3');
          GSC.sfx = false;
        }
      });

      // settings: MUSIC
      $('.music').click(function() {
        localStorage["music"] = $(this).is(":checked");
        GSC.music = parseBool(localStorage["music"]);
        if (GSC.music) {
          playSound('click5');
        } else playSound('click3');
      });

      // load sfx - array of filenames
      function loadSound(arr) {
        for (var i = 0; i < arr.length; i++) playSound(arr[i], true);
      }

      // play sfx - filename without extension
      function playSound(filename, preload) {
        if (!filename) return;
        if (GSC.sfx && GSC.sfxbuffers && GSC.sfxbuffers[filename + '.mp3']) {
          // play stored audio buffer
          var sfx = GSC.audioctx.createBufferSource();
          sfx.buffer = GSC.sfxbuffers[filename + '.mp3'];
          sfx.connect(GSC.audioctx.destination);
          sfx.start();
          return;
        }

        // check whether the audio buffer already exists
        if (GSC.sfxbuffers && GSC.sfxbuffers[filename + '.mp3']) return;

        // load the audio buffer from network
        var req = new XMLHttpRequest();
        req.open('GET', '/sfx/' + filename + '.mp3', true);
        req.responseType = 'arraybuffer';

        // onload handler
        req.onload = function() {
          GSC.ComOff();
          var filename = req.responseURL.substring(req.responseURL.lastIndexOf('/')+1);
          GSC.audioctx && GSC.audioctx.decodeAudioData(req.response, function(buffer) {
              GSC.sfxbuffers[filename] = buffer;
              if (!GSC.sfx || preload) return;

              // play audio buffer
              var sfx = GSC.audioctx.createBufferSource();
              sfx.buffer = buffer;
              sfx.connect(GSC.audioctx.destination);
              sfx.start();
          });
        }
        GSC.ComOn();
        req.send();
      }

      // GSC.PlaySound: play a sound
      if (typeof GSC.PlaySound !== "function") GSC.PlaySound = function(sound) {
        playSound(sound);
      }



      // OTHER HANDLERS AND RUNTIME

      // delayed navigation to the saved state
      if (!localStorage['navigation']) {
        localStorage['navigation'] = 'nav_price';
      }

      setTimeout(function() { // initial click event
        GSC.preventclick = true;
        $('.' + localStorage['navigation']).click();
      }, 10);

      // remove modals and toasts on every click
      // + prepare AudioContext object (preceding user action is mandatory!)
      $('.section,main,nav').click(function() {
        GSC.lastclick = +new Date();
        $('.toast').removeClass('active');
        if (GSC.modals.length) {

          // fix for logo modal
          if (GSC.modals[0] && GSC.modals[0] == 'appinfo_modal') return;
          GSC.modals.forEach(el => {
            $('#' + el).removeClass('active');
          });
          GSC.modals = [];
        }

        // exit if we already have AudioContext
        if (GSC.audioctx) return;

        // try to get AudioContext with hinting
        if (!GSC.audioctx) {
          try {
            GSC.audioctx = new AudioContext({
              latencyHint: 'interactive',
              sampleRate: 44100,
            });
          }
          catch(e) {
            console.log("AudioContext error", e);
          }
        }

        // try to get AudioContext without hinting
        if (!GSC.audioctx) {
          try {
            GSC.audioctx = new AudioContext();
          }
          catch(e) {
            console.log("AudioContext error", e);
          }
        }

        // SOUND: preload
        loadSound([
          'click1',
          'click2',
          'click3',
          'click4',
          'click5',
          'click6',
          'err',
          'laser',
        ]);
      });

      // process switches
      if (localStorage['music'] == null) localStorage["music"] = "true"
      if (localStorage['sfx'] == null) localStorage["sfx"] = "true"
      if (localStorage['vibrate'] == null) localStorage["vibrate"] = "true"
      $('.music').prop('checked', localStorage["music"] == "true");
      $('.sfx').prop('checked', localStorage["sfx"] == "true");
      $('.ui').prop('checked', localStorage["ui"] == "true");
      $('.vibrate').prop('checked', localStorage["vibrate"] == "true");

      // set PIN
      if (localStorage['pin'] && localStorage['pin'].length) {
        GSC.pin = localStorage['pin'];
        $('#pin').val(GSC.pin);
      }

      // set API key
      if (localStorage['apikey'] && (localStorage['apikey'].length == 64)) {
        GSC.apikey = localStorage['apikey'];
      }

      // set GSC settings properties
      GSC.music = parseBool(localStorage["music"]);
      GSC.sfx = parseBool(localStorage["sfx"]);
      GSC.vibrate = parseBool(localStorage["vibrate"]);

      // beer favorites list
      if (localStorage['favorites']) {
        GSC.favorites = JSON.parse(localStorage["favorites"]);
      }
      if (!GSC.favorites) GSC.favorites = {};

      // UI
      setUImode();
      $('nav,body,#offline,.modal,.toast').removeClass('hidden');
      $('nav,body').hide().show(350);

      // UI fix for touch devices
      if (GSC.touch) {
        $('#changelog_modal').removeClass('medium');
      }

    });
  })(window, $);

  // reload the app on screen orientation change
  screen.orientation.addEventListener('change', function() {
    location.reload();
  });
</script>
