<!-- top navigation | all sizes -->
<nav id="top_nav" class="top hidden">
  <a class="nav_app">
    <span class="badge circle left red bold white-text hidden">‚ùï</span>
    <img id="logo" class="square large"
      src="{{ cdn }}/img/k-app-logo.png"/>
  </a>
  <a class="nav_config">
    <i tabindex="-1" class="large" data-color="lime-text">build</i>
    <div>
      <span tabindex="-1">{{ l.nav_config }}</span>
    </div>
  </a>
  <a class="nav_user">
    <i tabindex="-1" class="large" data-color="lime-text">face</i>
    <img id="avatar" class="small circle no-margin hidden"
      src=""
      onerror="javascript:if($(this).attr('src')){$(this).addClass('hidden');$('.nav_user').append('<i tabindex=-1 class=\'large lime-text\'>face</i>');}"
    />
  </a>
</nav>

<!-- bottom navigation | medium large -->
<nav class="bottom m l hidden">
  <a class="nav_info">
    <i tabindex="-1" class="large" data-color="blue-text">info</i>
    <div>
      <span tabindex="-1">{{ l.nav_info }}</span>
    </div>
  </a>
  <a class="nav_game">
    <i tabindex="-1" class="large" data-color="teal-text">sports_esports</i>
    <div>
      <span tabindex="-1">{{ l.nav_game }}</span>
    </div>
  </a>
  <a class="nav_message">
    <i tabindex="-1" class="large" data-color="green-text">message</i>
    <div>
      <span tabindex="-1">{{ l.nav_message }}</span>
    </div>
  </a>
  <a class="nav_price">
    <i tabindex="-1" class="large" data-color="pink-text">paid</i>
    <div>
      <span tabindex="-1">{{ l.nav_price }}</span>
    </div>
  </a>
  <a class="nav_warehouse">
    <i tabindex="-1" class="large" data-color="orange-text">warehouse</i>
    <div>
      <span tabindex="-1">{{ l.nav_warehouse }}</span>
    </div>
  </a>
</nav>

<!-- bottom navigation | small -->
<nav class="bottom s hidden">
  <a class="nav_info">
    <i tabindex="-1" class="large" data-color="blue-text">info</i>
  </a>
  <a class="nav_game">
    <i tabindex="-1" class="large" data-color="teal-text">sports_esports</i>
  </a>
  <a class="nav_message">
    <i tabindex="-1" class="large" data-color="green-text">message</i>
  </a>
  <a class="nav_price">
    <i tabindex="-1" class="large" data-color="pink-text">paid</i>
  </a>
  <a class="nav_warehouse">
    <i tabindex="-1" class="large" data-color="orange-text">warehouse</i>
  </a>
</nav>

<script>
  (function (w, $, undefined) {
    "use strict";

    // bottom progress bar
    w.onscroll = function() {
      var scroll = document.body.scrollTop || document.documentElement.scrollTop;
      var height = document.documentElement.scrollHeight - document.documentElement.clientHeight;
      var scrolled = (scroll / height) * 100;
      if (document.getElementById("progressbar")) document.getElementById("progressbar").style.width = scrolled + "%";
      if (localStorage && localStorage['navigation']) {
        localStorage['scroll_' + localStorage['navigation']] = parseInt(scroll);
      }
      // manipulate top navigation and comm icon on touch enabled devices
      if (GSC.touch) {
        if (scroll > 100) {
          $("#top_nav").hide(250);
          $("#comm").css('top', 0);
        } else {
          $("#top_nav").show(100);
          $("#comm").css('top', '85px');
        }
      }
    };

    // *** DELAYED FUNCTIONS ***
    GSC._fn.push(function UIhandlers() {

      // array of modals
      GSC.modals = [];

      // set UI mode
      function setUImode() {
        if (parseBool(localStorage["ui"])) {
          ui("mode", "light");
          $(".white-text").removeClass('white-text').addClass('black-text');
          $('#debuglist').addClass('white-text');
        } else {
          ui("mode", "dark");
          $(".black-text").removeClass('black-text').addClass('white-text');
          $('#debuglist').addClass('white-text');
        }
      }

      // set navigation by element
      function setNavigation(el) {
        if (!el) return false;
        if (!$('.' + el)) return false;
        localStorage['navigation'] = el;
        $('#avatar').removeClass('large');

        // remove modals
        if (GSC.modals.length) {
          GSC.modals.forEach(el => {
            $('#' + el).removeClass('active');
          });
        }

        // compute vertical offset
        var offset = localStorage['scroll_' + el];
        if (isNaN(offset)) offset = 0;
        var last = localStorage['scroll_last_' + el];
        if (isNaN(last)) last = 0;
        if (localStorage['navigation_last'] == el) {
          if (offset == last) offset = 0;
        }
        localStorage['scroll_last_' + el] = offset;
        localStorage['navigation_last'] = el;
        window.scrollTo({
          top: offset,
          left: 0,
          behavior: 'smooth'
        });

        // set view design
        $('nav i, nav div').removeClass();
        $('.section').addClass('hidden');
        $('.' + el + '>i').addClass($('.' + el + '>i').data('color')).addClass('large');
        $('.' + el + '>div').addClass($('.' + el + '>i').data('color')).addClass('bold');
      }

      // NAVIGATION CLICK HANDLERS

      // K - logo
      $('.nav_app').click(function () {
        $('#appinfo_modal').toggleClass('active');
        $('#changelog_modal').removeClass('active');
        GSC.modals = [];
        GSC.modals.push('appinfo_modal');
      });

      // update
      $('.nav_update').click(function () {
        if (GSC.offline) {
          setTimeout(function () {
            $('#err_connection').addClass('active');
          }, 10);
          return;
        }
        location.replace("?nonce={{ nonce }}");
      });

      // API
      $('.nav_api').click(function () {
        if (GSC.offline) {
          setTimeout(function () {
            $('#err_connection').addClass('active');
          }, 10);
          return;
        }
        location.href = '/api';
      });

      // changelog
      $('.nav_changelog').click(function () {
        if (GSC.offline) {
          setTimeout(function () {
            $('#err_connection').addClass('active');
          }, 10);
          return;
        }
        $('#changelog_modal').addClass('active');
        setTimeout(function() {
          GSC.modals.push('changelog_modal');
        }, 10);
        var nonce = "?nonce=" + Math.round(Math.random() * 1000000);
        $.get('/api/v1/GetChangeLog' + nonce, function(data) {
          if (data && data.data && data.data.changelog) {
            $('#changelog_box').html(data.data.changelog);
          }
        });
      });
      
      // config
      $('.nav_config').click(function () {
        setNavigation(this.className);
        $('#config').removeClass('hidden');
      });
      
      // user
      $('.nav_user').click(function () {
        setNavigation(this.className);
        $('#user').removeClass('hidden');
        $('#avatar').addClass('large');
        if (typeof GSC.GetUser == "function") GSC.GetUser();
      });

      // info
      $('.nav_info').click(function () {
        setNavigation(this.className);
        $('#info').removeClass('hidden');
      });
      
      // game
      $('.nav_game').click(function () {
        setNavigation(this.className);
        $('#game').removeClass('hidden');
      });
      
      // message
      $('.nav_message').click(function () {
        setNavigation(this.className);
        $('#message').removeClass('hidden');
      });
      
      // price
      $('.nav_price').click(function () {
        setNavigation(this.className);
        $('#price').removeClass('hidden');
      });
      
      // warehouse
      $('.nav_warehouse').click(function () {
        setNavigation(this.className);
        $('#warehouse').removeClass('hidden');
      });

      // settings: UI
      $('.ui').click(function () {
        localStorage["ui"] = $(this).is(":checked");
        setUImode();
      });

      // settings: VIBRATE
      $('.vibrate').click(function () {
        localStorage["vibrate"] = $(this).is(":checked");
        GSC.vibrate = parseBool(localStorage["vibrate"]);
        if (GSC.vibrate) {
          window.navigator.vibrate(100);
        }
        setTestVibrateButton();
      });

      // settings: SFX
      $('.sfx').click(function () {
        localStorage["sfx"] = $(this).is(":checked");
        GSC.sfx = parseBool(localStorage["sfx"]);
        setTestSfxButton();
        if (GSC.sfx) {
          playSound('click');
        }
      });

      // settings: MUSIC
      $('.music').click(function () {
        localStorage["music"] = $(this).is(":checked");
        GSC.music = parseBool(localStorage["music"]);
        setTestMusicButton();
      });

      // test: VIBRATE
      $('.nav_test_vib').click(function () {
        if (GSC.vibrate) {
          window.navigator.vibrate([100,50,100,50,100]);
        }
      });

      // load sfx by filename without extension
      function playSound(filename) {
        if (GSC.sfxbuffers && GSC.sfxbuffers[filename + '.mp3']) {
          var sfx = GSC.audioctx.createBufferSource();
          sfx.buffer = GSC.sfxbuffers[filename + '.mp3'];
          sfx.connect(GSC.audioctx.destination);
          sfx.start();
          return;
        }
        GSC.D('SFX loading ' + filename + '.mp3');
        var req = new XMLHttpRequest();
        req.open('GET', '/sfx/' + filename + '.mp3', true);
        req.responseType = 'arraybuffer';
        req.onload = function() {
          GSC.ComOff();
          var filename = req.responseURL.substring(req.responseURL.lastIndexOf('/')+1);
          GSC.audioctx && GSC.audioctx.decodeAudioData(req.response, function(buf) {
              console.log(filename);
              GSC.sfxbuffers[filename] = buf;
              var sfx = GSC.audioctx.createBufferSource();
              sfx.buffer = buf;
              sfx.connect(GSC.audioctx.destination);
              sfx.start();
          });
        }
        GSC.ComOn();
        req.send();
      }

      // SFX audio buffers
      GSC.sfxbuffers = [];

      // test: SFX
      $('.nav_test_sfx').click(function () {
        if (GSC.sfx) {
          playSound('laser');
        }
      });

      // test: MUSIC
      $('.nav_test_music').click(function () {
        if (GSC.music) {
        }
      });

      // OTHER HANDLERS AND RUNTIMES

      // navigate to the saved state
      if (localStorage['navigation']) {
        $('.' + localStorage['navigation']).click();
      } else {
        $('.nav_info').click();
      }
      
      // click to remove modals and toasts, prepare AudioContext object (user action is mandatory)
      $('.section,main').click(function () {
        $('.toast').removeClass('active');
        if (GSC.modals.length) {
          GSC.modals.forEach(el => {
            $('#' + el).removeClass('active');
          });
          GSC.modals = [];
        }
        // AudioContext
        if (!GSC.audioctx) {
          try {
            GSC.audioctx = new AudioContext();
          }
          catch(e) {
            console.log("AudioContext error:");
            console.log(e);
          }
        }
      });

      // switches - defaults
      if (localStorage['music'] == null) localStorage["music"] = "true"
      if (localStorage['sfx'] == null) localStorage["sfx"] = "true"
      if (localStorage['vibrate'] == null) localStorage["vibrate"] = "true"

      // switches - set UI
      $('.music').prop('checked', localStorage["music"] == "true");
      $('.sfx').prop('checked', localStorage["sfx"] == "true");
      $('.ui').prop('checked', localStorage["ui"] == "true");
      $('.vibrate').prop('checked', localStorage["vibrate"] == "true");

      // GSC properties
      GSC.music = parseBool(localStorage["music"]);
      GSC.sfx = parseBool(localStorage["sfx"]);
      GSC.vibrate = parseBool(localStorage["vibrate"]);

      // test button - VIBRATE
      function setTestVibrateButton() {
        if (GSC.vibrate) {
          $('.nav_test_vib').removeClass('grey').addClass('blue');
        } else {
          $('.nav_test_vib').removeClass('blue').addClass('grey');
        }
      }

      // test button - SFX
      function setTestSfxButton() {
        if (GSC.sfx) {
          $('.nav_test_sfx').removeClass('grey').addClass('blue');
        } else {
          $('.nav_test_sfx').removeClass('blue').addClass('grey');
        }
      }

      // test button - MUSIC
      function setTestMusicButton() {
        if (GSC.music) {
          $('.nav_test_music').removeClass('grey').addClass('blue');
        } else {
          $('.nav_test_music').removeClass('blue').addClass('grey');
        }
      }

      // UI quirks
      setUImode();
      setTestVibrateButton();
      setTestSfxButton();
      setTestMusicButton();
      $('nav,body,#offline,.modal,.toast').removeClass('hidden');
      $('nav,body').hide().show(300);
      GSC.D('<b>UUID</b> ' + localStorage["uuid"]);

      // SHA-256 test
      try {
        sha256('hash test').then(function (hash) {
            if (hash == 'cd5e9b1a6c3c37593b8b622b2921ee5320944192acb48b55155cbe8d32dc5ea1') {
              GSC.D('SHA-256 test OK');
            } else {
              w.location.href = '/err/600';
            }
          }
        );
      } catch(e) {
        w.location.href = '/err/600';
      }

      //$('.nav_app').click();
    });
  })(window, $);
</script>
